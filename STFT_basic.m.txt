%*function X = STFT_basic(x, w, H)
    %if nargin < 3
        %H = 8; % Default hop size if not specified
    %end
    
    %N = 256;
    %L = length(x); % Length of the signal
    %M = floor((L - N) / H); % Number of frames

    %disp(['N (Window length): ', num2str(N)]);
    %disp(['L (Signal length): ', num2str(L)]);
    %disp(['M (Number of frames): ', num2str(M)]);
    %disp(['H (Hop size): ', num2str(H)]);

    
    %X = zeros(N, M + 1); % Initialize the complex STFT matrix
    
    %for m = 0:M
        % Controls
        %idx_start = m * H + 1;
        %idx_end = m * H + N;
        %if idx_end > L
            %disp(['Warning: idx_end exceeds signal length at frame ', num2str(m)]);
        %end
        %disp(['Frame ', num2str(m), ': idx_start = ', num2str(idx_start), ', idx_end = ', num2str(idx_end)]);

        %x_win = x(m * H + 1 : m * H + N) .* w; % Apply window to the segment of the signal
        %X_win = fft(x_win, w); % FFT of the windowed signal
        
        %X(:, m + 1) = X_win; % Store the FFT result in the matrix
    %end
    
    %K = floor((N + 1) / 2);
    %X = X(1:K, :); % Take only the first K rows (positive frequencies)
    
%end


function [S, f, t] = STFT_basic(x, window_size, hop_size, Fs)

    % Determine the number of frequency bins
    numFreqs = floor(window_size / 2) + 1;
    
    % Calculate the number of frames possible with the given hop size
    numFrames = floor((length(x) - window_size) / hop_size) + 1;
    
    % Initialize the STFT matrix
    S = zeros(numFreqs, numFrames);
    
    % Define the window function (e.g., Hamming window)
    w = hamming(window_size);
    
    % Frequency vector (positive frequencies)
    f = (0:numFreqs-1)' * Fs / window_size;
    
    % Time vector for the center of each frame
    t = (0:numFrames-1) * hop_size / Fs;

    % Perform the STFT calculation
    for m = 1:numFrames
        startIdx = (m - 1) * hop_size + 1;
        if startIdx + window_size - 1 > length(x)  % Check to avoid exceeding signal length
            break;  % Exit the loop if the window extends beyond the signal
        end
        x_win = x(startIdx:startIdx + window_size - 1) .* w; % Apply window
        X_win = fft(x_win);  % FFT computation
        S(:, m) = X_win(1:numFreqs);  % Store only the relevant frequencies
    end
end


